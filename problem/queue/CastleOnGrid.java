package problem.queue;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class CastleOnGrid {
    private class Node {
        private int x;
        private int y;
        private int position;
        Node(int x, int y, int n) {
            this.x = x;
            this.y = y;
            this.position = x * n + y; 
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public int getPosition() {
            return position;
        }
    }
    List<Node> nodeList = new ArrayList<Node>();
    List<Node> known = new ArrayList<Node>();
    int[] forest;

    public void initializeForest(int n) {
        forest = new int[n * n];
        for (int i = 0; i < n * n; i++) {
            forest[i] = i;
        }
    }

    public void initializeNode(int size) {
        int n = size;
        Node current;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                current = new Node(i, j, size);
                nodeList.add(current);
            }
        }
    } 

    public void breathFirstSearch(String[] grid, int x, int y, List<Node> known, int[] forest) {
        LinkedList<Node> queue = new LinkedList<Node>();
        LinkedList<Node> adjList;
        int size = grid[0].length();
        Node source;
        known.add(nodeList.get(x * size + y));
        queue.addLast(nodeList.get(x * size + y));
        while (!queue.isEmpty()) {
            source = queue.removeFirst();
            adjList = new LinkedList<Node>();
            if (!(source.getX() + 1 >= size)) {
                adjList.addLast(nodeList.get((source.getX() + 1) * size + source.getY()));
            }
            if (!(source.getX() - 1 < 0)) {
                adjList.addLast(nodeList.get((source.getX() - 1) * size + source.getY()));
            }
            if (!(source.getY() + 1 >= size)) {
                adjList.addLast(nodeList.get(source.getX() * size + (source.getY() + 1)));
            }
            if (!(source.getY() - 1 < 0)) {
                adjList.addLast(nodeList.get(source.getX() * size + (source.getY() - 1)));
            }
            for (Node node : adjList) {
                if (!known.contains(node)) {
                    if (grid[node.getX()].charAt(node.getY()) == 'X') {
                        continue;
                    }
                    known.add(node);
                    queue.addLast(node);
                    forest[node.getPosition()] = source.getPosition();
                }
            }
        }
    }
    
    public LinkedList<Node> getPath(int x, int y, int goalX, int goalY, int[] forest, int size) {
        LinkedList<Node> path = new LinkedList<Node>();
        int source = new Node(x, y, size).getPosition();
        int goal = new Node(goalX, goalY, size).getPosition();
        if (goal == source) {
            path.addLast(nodeList.get(forest[goal]));
            return path;
        }
        path.addLast(nodeList.get(goal));
        while (forest[goal] != forest[source]) {
            if (forest[goal] == goal) {
                break;
            }
            path.addLast(nodeList.get(forest[goal]));
            goal = forest[goal];
        }
        path.addLast(nodeList.get(source));
        return path;
    }

    public int minMoves(String[] grid, int x, int y, int goalX, int goalY) {
        int size = grid[0].length();
        initializeForest(size);
        initializeNode(size);
        breathFirstSearch(grid, x, y, known, forest);
        LinkedList<Node> path = getPath(x, y, goalX, goalY, forest, size);
        return getMinMoves(path, forest, size);
    }

    public int getMinMoves(LinkedList<Node> path, int[] forest, int size) {
        int minMoves = -1;
        Node current;
        int startX, startY, currentX, currentY;
        LinkedList<Integer> queue = new LinkedList<Integer>();
        if (path.size() == 1) {
            return ++minMoves;
        }
        if (path.size() == 2) {
            current = path.removeFirst();
            startX = current.getX();
            startY = current.getY();
            current = path.removeFirst();
            currentX = current.getX();
            currentY = current.getY();
            if (forest[startX * size + startY] == forest[currentX * size + currentY]) {
                minMoves = 1;
                return minMoves;
            } else {
                return minMoves;
            }
        }
        if (path.size() > 2) {
            current = path.removeFirst();
            startX = current.getX();
            startY = current.getY();
            while (!path.isEmpty()) {
                current = path.removeFirst();
                currentX = current.getX();
                currentY = current.getY();
                if (startX == currentX) {
                    queue.push(1);
                } else if (startY == currentY) {
                    queue.push(2);
                }
                startX = currentX;
                startY = currentY;
            }
        }
        minMoves = 1;
        int initialValue = queue.removeFirst();
        int currentValue;
        while (!queue.isEmpty()) {
            currentValue = queue.removeFirst();
            if (initialValue != currentValue) {
                minMoves++;
            }
            initialValue = currentValue;
        }
        return minMoves;
    }

    public static void main(String[] args) {
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        castleOnGrid.test1();
        castleOnGrid.test2();
        castleOnGrid.test3();
        castleOnGrid.test4();
        castleOnGrid.test5();
        castleOnGrid.test6();
        castleOnGrid.test7();
        castleOnGrid.test8();
        castleOnGrid.test9();
        castleOnGrid.test10();
    }

    public void test1() {
        String[] grid = {
            ".....",
            "..X..",
            "...X.",
            "..X..",
            "....."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 2, 2, 0, 4));
    }

    public void test2() {
        String[] grid = {
            "...",
            ".X.",
            "..."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 0, 0, 1, 2));
    }

    public void test3() {
        String[] grid = {
            ".X.",
            ".X.",
            "..."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 0, 0, 0, 2));
    }

    public void test4() {
        String[] grid = {
            ".X.",
            ".X.",
            "..."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 0, 0, 0, 0));
    }
    public void test5() {
        String[] grid = {
            ".X.",
            ".X.",
            ".X."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 0, 0, 0, 2));
    }
    public void test6() {
        String[] grid = {
            ".X.",
            ".X.",
            ".X."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 0, 0, 1, 0));
    }

    public void test7() {
        String[] grid = {
            "...",
            ".X.",
            ".X."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 2, 0, 0, 2));
    }

    public void test8() {
        String[] grid = {
            "...",
            ".X.",
            ".X."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 2, 0, 2, 2));
    }

    public void test9() {
        String[] grid = {
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "....................................................................................................",
            "...................................................................................................."
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 0, 0, 99, 99));
    }

    public void test10() {
        String[] grid = {
            ".X..XX...X",
            "X.........",
            ".X.......X",
            "..........",
            "........X.",
            ".X...XXX..",
            ".....X..XX",
            ".....X.X..",
            "..........",
            ".....X..XX"
        };
        CastleOnGrid castleOnGrid = new CastleOnGrid();
        System.out.println(castleOnGrid.minMoves(grid, 9, 1, 9, 6));
    }
}
